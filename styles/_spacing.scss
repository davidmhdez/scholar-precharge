$sm: (
    1: 4px,
    2: 8px,
    3: 16px,
    4: 22px,
    5: 32px
);

$lg: (
    1: 20px,
    2: 30px,
    3: 80px,
    4: 100px
);

$-valid-types: 'sm' 'lg';
$-valid-props: 'margin' 'padding';

@function get-size-map($type){
    
    $size-map: null;
    
    @if $type == 'sm' {
        $size-map: map-merge((0:0), $sm );
    }@else if $type == 'lg'{
        $size-map: map-merge((0:0), $lg );
    }@else {
        @error "El valor ingresado es invalido, solo puedes elegir entre #{$-valid-types}";
    }

    @return $size-map;
}

@function valid-values($prop-values, $type) {

    $size-map: get-size-map($type);

    @if type-of($prop-values) != arglist{
        @error "Los valores de la propiedad son requeridos y estas enviando #{$prop-values}";
    }

    $length: length($prop-values);
    $valid-sizes: map-keys($size-map);

    @if $length == 3 {
        @error "el formato de los valores ingresados es incorrecto, debes enviarlo en el formato de propiedad css";
    }
    
    @each $prop-value in $prop-values {
        @if index($valid-sizes, $prop-value) == null{
            @error "El valor #{prop-value} es invalido, solo puedes usar #{$valid-sizes} para tama√±os #{$type}";
        }
    }

    $values: (
        'length': $length,
        'size-map': $size-map
    );

    @return $values;
}

@function set-values($map, $values-length, $values, $prop){

    $prop-value: null;

    @if index($-valid-props, $prop ) == null {
        @error 'La propiedad ingresada es invalida, solo puedes usar #{$-valid-props}';
    }

    @if $values-length == 1 {
        $prop-value: map-get($map, nth($values , 1 ));
    }
    @else if $values-length == 2 {
        $p-y: map-get($map , nth($values, 1));
        $p-x: map-get($map, nth($values, 2));
        $prop-value: $p-y $p-x;
    }
    @else if $values-length == 4 {
        $p-top: map-get($map, nth($values, 1));
        $p-right: map-get($map, nth($values, 2));
        $p-bottom: map-get($map, nth($values, 3));
        $p-left: map-get($map, nth($values, 4));

        $prop-value: $p-top $p-right $p-bottom $p-left;
    }

    $full-prop: (
        'prop-name': $prop,
        'prop-value': $prop-value
    );

    @return $full-prop;
}


@function sm($prop, $sizes) {

    $values: valid-values($sizes, 'sm');
    $map: map-get($values , 'size-map');
    $length: map-get($values , 'length');
    $prop-values: set-values($map, $length, $sizes, $prop);

    @return $prop-values;
}

@function lg($prop, $sizes... ) {

    $values: valid-values($sizes, 'lg');
    $map: map-get($values , 'size-map');
    $length: map-get($values , 'length');
    $prop-values: set-values($map, $length, $sizes, $prop);

    @return $prop-values;
}


@function direction($type, $direction, $size, $prop ){
    $valid-directions: top right bottom left;
    $map: get-size-map($type);

    @if index($valid-directions , $direction ) == null {
        @error 'La direccion #{$direction} es invalida, solo puedes elegir entre #{$valid-directions}';
    }@else if map-get($map, $size) == null {
        @error 'El valor #{$size} es invalido, debes elegir entre #{map-keys($map)}';
    }@else if index($-valid-props, $prop ) == null {
        @error 'La propiedad ingresada es invalida, solo puedes usar #{$-valid-props}';
    }

    $prop-name: '#{$prop}-#{$direction}';
    $prop-value: null;

    @if $direction == nth($valid-directions, 1 ) {
        $prop-value: map-get($map, $size);
    }@else if $direction == nth($valid-directions, 2 ) {
        $prop-value: map-get($map, $size);
    }@else if $direction == nth($valid-directions, 3 ) {
        $prop-value: map-get($map, $size);
    }@else if $direction == nth($valid-directions, 4 ) {
        $prop-value: map-get($map, $size);
    }

    $property: (
        'prop-name': $prop-name,
        'prop-value': $prop-value
    );

    @return $property;

}